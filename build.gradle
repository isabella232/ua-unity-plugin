import java.util.regex.Pattern

allprojects {
  ext {
      unityExe = System.getProperty("UNITY_EXE")
      if (unityExe == null || unityExe.isEmpty()) {
          unityExe = System.getenv("UNITY_EXE")
      }
      if (unityExe == null || unityExe.isEmpty()) {
          unityExe ='/Applications/Unity/Unity.app/Contents/MacOS/Unity'
      }

      unityClassesJar = System.getProperty("UNITY_CLASSES_JAR")
      if (unityClassesJar == null || unityClassesJar.isEmpty()) {
          unityClassesJar = System.getenv("UNITY_CLASSES_JAR")
      }
      if (unityClassesJar == null || unityClassesJar.isEmpty()) {
          unityClassesJar ='/Applications/Unity/PlaybackEngines/AndroidPlayer/Variations/mono/Release/Classes/classes.jar'
      }

      airshipProperties = new Properties()
      airshipProperties.load(new FileInputStream("airship.properties"))
  }
}

configurations {
    ios
}

repositories {
    ivy {
        url 'https://bintray.com'
        layout 'pattern', {
            artifact '/artifact/download/[organisation]/iOS/[module]/[revision]/libUAirship-[revision].[ext]'
        }
    }
}

dependencies {
    ios "urbanairship:urbanairship-sdk:${airshipProperties.iosAirshipVersion}@zip"
}


task clean(type: Delete) {
    delete "$buildDir"
}

task build {
    doLast {

        // Copy and unpack iOS static library
        copy {
            def zipPath = project.configurations.ios.find {it.name.startsWith("urbanairship") }
            def zipFile = file(zipPath)
            def outputDir = file("${buildDir}/unity-plugin/Assets/plugins/iOS/")

            from zipTree(zipFile)
            into outputDir
            include "Airship/**"
        }

        // Copy the Assets, exclude PluginInfo.cs and UADependencies.xml so we can copy and replace the version placeholder
        copy {
            from file("Assets")
            into file("$buildDir/unity-plugin/Assets/")
            exclude "UrbanAirship/PluginInfo.cs"
            exclude "UrbanAirship/Editor/UADependencies.xml"
        }

        // Copy PluginInfo.cs and replace the version placeholders
        copy {
            from file("Assets")
            into file("$buildDir/unity-plugin/Assets/")
            include "UrbanAirship/PluginInfo.cs"
            filter { String line -> line.replaceAll(Pattern.quote("__PLUGIN_VERSION__"), airshipProperties.version) }
            filter { String line -> line.replaceAll(Pattern.quote("__ANDROID_AIRSHIP_VERSION__"), airshipProperties.androidAirshipVersion) }
            filter { String line -> line.replaceAll(Pattern.quote("__ANDROID_SUPPORT_LIB_VERSION__"), airshipProperties.androidSupportLibVersion) }
            filter { String line -> line.replaceAll(Pattern.quote("__ANDROID_PLAY_SERVICES_VERSION__"), airshipProperties.androidPlayServicesVersion) }
            filter { String line -> line.replaceAll(Pattern.quote("__IOS_AIRSHIP_VERSION__"), airshipProperties.iosAirshipVersion) }
        }

        // Copy UADependencies.xml and replace the version placeholders
        copy {
            from file("Assets")
            into file("$buildDir/unity-plugin/Assets/")
            include "UrbanAirship/Editor/UADependencies.xml"
            filter { String line -> line.replaceAll(Pattern.quote("__PLUGIN_VERSION__"), airshipProperties.version) }
            filter { String line -> line.replaceAll(Pattern.quote("__ANDROID_AIRSHIP_VERSION__"), airshipProperties.androidAirshipVersion) }
            filter { String line -> line.replaceAll(Pattern.quote("__ANDROID_SUPPORT_LIB_VERSION__"), airshipProperties.androidSupportLibVersion) }
            filter { String line -> line.replaceAll(Pattern.quote("__ANDROID_PLAY_SERVICES_VERSION__"), airshipProperties.androidPlayServicesVersion) }
            filter { String line -> line.replaceAll(Pattern.quote("__IOS_AIRSHIP_VERSION__"), airshipProperties.iosAirshipVersion) }
        }

        def argv = [
                    "-g.building",
                    "-buildTarget", "android",
                    "-batchmode",
                    "-projectPath", "$buildDir/unity-plugin/",
                    "-logFile", "build/unity.log",
                    "-gvh_disable",
                    "-exportPackage",
                        "Assets/UrbanAirship",
                        "Assets/PlayServicesResolver",
                        "Assets/Plugins/iOS",
                        "Assets/Plugins/iOS/Airship",
                        "Assets/Plugins/Android/urbanairship-resources",
                        "Assets/Scripts",

                    file("build/urbanairship-${airshipProperties.version}.unitypackage").absolutePath,
                    "-quit"
            ]

        exec {
            executable "${unityExe}"
                args argv
        }
    }
}
