project.ext {
    unityExe = System.getProperty("UNITY_EXE")
    if (unityExe == null || unityExe.isEmpty()) {
        unityExe = System.getenv("UNITY_EXE")
    }
    if (unityExe == null || unityExe.isEmpty()) {
        unityExe ='/Applications/Unity/Unity.app/Contents/MacOS/Unity'
    }

    airshipProperties = new Properties()
    airshipProperties.load(new FileInputStream("airship.properties"))
}


def explodeAar(String aarPath, String destinationPath) {
    // Unpack the resources and classes.jar
    copy {
        from zipTree(file(aarPath))
        into file(destinationPath)
        include "res/**", "classes.jar", "AndroidManifest.xml", "original_AndroidManifest.xml"
        rename "AndroidManifest.xml", "original_AndroidManifest.xml"
    }

    // Move the classes.jar file into the libs directory. Exclude Manifest*.class files.
    task(destinationPath, type: Jar) {
        from zipTree(file("$destinationPath/classes.jar"))
        destinationDir file("$destinationPath/libs")
        archiveName "${file(destinationPath).name}.jar"
        exclude '**/Manifest.class', '**/Manifest$*.class'
    }.execute()

    // Generate a Project.properties file
    def propertiesFile = file("$destinationPath/project.properties")
    propertiesFile.text = "target=android-23\n"
    propertiesFile.text += "android.library=true"

    // Delete the classes.jar
    delete "$destinationPath/classes.jar"
}

task clean(type: Delete) {
    delete "$buildDir"
}


task build << {
    // Copy the plugin src
    copy {
        from file("Assets")
        into file("$buildDir/unity-plugin/Assets/")
    }

    def androidLibProject = project.findProject(":android-plugin-lib")

    // Android Plugin lib
    explodeAar("${androidLibProject.buildDir}/outputs/aar/android-plugin-lib-release.aar", "$buildDir/unity-plugin/Assets/Plugins/Android/urbanairship-plugin-lib")

    // Urban Airship SDK
    file("${androidLibProject.projectDir}/aars").listFiles().each {
        if (it.getName().startsWith("urbanairship-sdk")) {
            explodeAar(it.absolutePath, "$buildDir/unity-plugin/Assets/Plugins/Android/urbanairship-sdk")
            return true
        }
    }

    def argv = [
                "-g.building",
                "-buildTarget", "android",
                "-batchmode",
                "-projectPath", "$buildDir/unity-plugin/",
                "-logFile", "build/unity.log",
                "-exportPackage",
                    "Assets/UrbanAirship",
                    "Assets/PlayServicesResolver",
                    "Assets/Plugins/iOS",
                    "Assets/Plugins/Android/AndroidManifest.xml",
                    "Assets/Plugins/Android/urbanairship-sdk",
                    "Assets/Plugins/Android/urbanairship-plugin-lib",

                file("build/urbanairship-${airshipProperties.version}.unitypackage").absolutePath,
                "-quit"
        ]

    exec {
        executable "${unityExe}"
            args argv
    }
}

build.dependsOn("clean", "android-plugin-lib:assembleRelease")
